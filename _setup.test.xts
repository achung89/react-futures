async function mockFetch(url, config) {
    switch (url) {
      case '/numbers': {
        return [2,3,4,5]
      }
      case '/checkout': {
        const isAuthorized = user.authorize(config.headers.Authorization)
        if (!isAuthorized) {
          return Promise.reject({
            ok: false,
            status: 401,
            json: async () => ({message: 'Not authorized'}),
          })
        }
        const shoppingCart = JSON.parse(config.body)
        // do whatever other things you need to do with this shopping cart
        return {
          ok: true,
          status: 200,
          json: async () => ({success: true}),
        }
      }
      default: {
        throw new Error(`Unhandled request: ${url}`)
      }
    }
  }
  beforeAll(() => jest.spyOn(window, 'fetch'))
  beforeEach(() => window.fetch.mockImplementation(mockFetch))